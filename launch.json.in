// If the debug configuration in 'launch.json' isn't detected by 'Microsoft C/C++' VSCode extension,
//  save [Ctrl+S] this file again
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "@DEBUG_SESSION_NAME@",
            "type": "@VSCODE_DEBUGGER_TYPE@",
            "request": "launch",

            "program": "@TARGET_BINARY_PATH@", // Same in template file, different in generated file 'launch.json': Resolves target executable path by 'CMake' itself: faster debug session startup, more transparent, cross-compatibility with single-config and multi-config makefile generators attained so far
            //"program": "${command:cmake.launchTargetPath}", // Resolves target executable path by 'CMake Tools' VSCode extension: slower debug session startup, more magical, but with better cross-compatibility
            //"program": "${workspaceFolder}/build/Debug/my_cpp_project.exe", // Location of the compiled executable formatted as forward-slashed-Windows-style path for MSVC
            //"program": "${workspaceFolder}/build-Debug/my_cpp_project.exe", // Location of the compiled executable formatted as UNIX-style path for Linux/GNU/GCC

            "args": [],  // start the binary with arguments: single letter arguments '-o file.txt', keyword arguments '--file input_file.txt' or an arbitrary text 'someArgument' or '"multiple words as one argument"' in quotes
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [], // provide custom system environment without modifying the underlying system - encapsulate project specific system setting inside the project itself: add custom system variables; modify PATH variable or other system environment variables

            @VSCODE_PLATFORM_AND_COMPILER_SPECIFIC_DEBUG_CONFIGURATIONS@
        }
    ]
}
